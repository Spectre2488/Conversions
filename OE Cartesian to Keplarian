import numpy as np

def cartesian_to_keplerian(r_vec, v_vec, mu):
    r = np.linalg.norm(r_vec)
    v = np.linalg.norm(v_vec)
    
    # Specific angular momentum
    h_vec = np.cross(r_vec, v_vec)
    h = np.linalg.norm(h_vec)
    
    # Inclination
    i = np.arccos(h_vec[2] / h)
    
    # Node vector
    k_vec = np.array([0, 0, 1])
    n_vec = np.cross(k_vec, h_vec)
    n = np.linalg.norm(n_vec)
    
    # Right ascension of the ascending node (RAAN)
    if n_vec[1] >= 0:
        RAAN = np.arccos(n_vec[0] / n)
    else:
        RAAN = 2 * np.pi - np.arccos(n_vec[0] / n)
    
    # Eccentricity vector
    e_vec = (1 / mu) * ((v**2 - mu / r) * r_vec - np.dot(r_vec, v_vec) * v_vec)
    e = np.linalg.norm(e_vec)
    
    # Argument of periapsis
    if e_vec[2] >= 0:
        omega = np.arccos(np.dot(n_vec, e_vec) / (n * e))
    else:
        omega = 2 * np.pi - np.arccos(np.dot(n_vec, e_vec) / (n * e))
    
    # True anomaly
    if np.dot(r_vec, v_vec) >= 0:
        nu = np.arccos(np.dot(e_vec, r_vec) / (e * r))
    else:
        nu = 2 * np.pi - np.arccos(np.dot(e_vec, r_vec) / (e * r))
    
    # Semi-major axis
    a = 1 / ((2 / r) - (v**2 / mu))
    
    # Convert radians to degrees
    i = np.degrees(i)
    RAAN = np.degrees(RAAN)
    omega = np.degrees(omega)
    nu = np.degrees(nu)
    
    return a, e, i, RAAN, omega, nu

# User inputs
r_x = float(input("Enter the x-coordinate of the position vector (r_x) in km: "))
r_y = float(input("Enter the y-coordinate of the position vector (r_y) in km: "))
r_z = float(input("Enter the z-coordinate of the position vector (r_z) in km: "))
v_x = float(input("Enter the x-coordinate of the velocity vector (v_x) in km/s: "))
v_y = float(input("Enter the y-coordinate of the velocity vector (v_y) in km/s: "))
v_z = float(input("Enter the z-coordinate of the velocity vector (v_z) in km/s: "))

r_vec = np.array([r_x, r_y, r_z])
v_vec = np.array([v_x, v_y, v_z])
mu = 398600  # standard gravitational parameter for Earth in km^3/s^2

a, e, i, RAAN, omega, nu = cartesian_to_keplerian(r_vec, v_vec, mu)
print("Semi-major axis (a):", a)
print("Eccentricity (e):", e)
print("Inclination (i):", i)
print("Right ascension of the ascending node (RAAN):", RAAN)
print("Argument of periapsis (omega):", omega)
print("True anomaly (nu):", nu)
